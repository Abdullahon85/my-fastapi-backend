from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List
import requests
import json
import os

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
PRODUCTS_FILE = "products.json"
TELEGRAM_BOT_TOKEN = os.getenv("BOT_TOKEN") or "—Ç–≤–æ–π_—Ç–æ–∫–µ–Ω"
TELEGRAM_GROUP_ID = os.getenv("GROUP_ID") or "-1001234567890"
API_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π –¥–æ–º–µ–Ω
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# === –ú–û–î–ï–õ–ò ===
class CartItem(BaseModel):
    title: str
    price: int
    amount: int

class Order(BaseModel):
    name: str
    phone: str
    address: str
    cart: List[CartItem]

class Product(BaseModel):
    id: int
    title: str
    price: int
    image: str
    discountPercentage: int

# === –ó–ê–ö–ê–ó: /api/order ===
@app.post("/api/order")
async def receive_order(order: Order):
    if not order.cart:
        raise HTTPException(status_code=400, detail="–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")

    text = f"üõí *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\nüë§ –ò–º—è: {order.name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\nüìç –ê–¥—Ä–µ—Å: {order.address}\n\nüì¶ –¢–æ–≤–∞—Ä—ã:\n"
    for item in order.cart:
        total = item.price * item.amount
        text += f"‚Ä¢ {item.title} x{item.amount} = {total} —Å—É–º\n"
    text += "\n‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç."

    response = requests.post(API_URL, json={
        "chat_id": TELEGRAM_GROUP_ID,
        "text": text,
        "parse_mode": "Markdown"
    })

    if response.status_code != 200:
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ Telegram")

    return {"status": "ok"}

# === –¢–û–í–ê–†–´: GET /api/products ===
@app.get("/api/products")
def get_products():
    try:
        with open(PRODUCTS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã")

# === –¢–û–í–ê–†–´: POST /api/products ===
@app.post("/api/products")
def update_products(products: List[Product]):
    try:
        with open(PRODUCTS_FILE, "w", encoding="utf-8") as f:
            json.dump([p.dict() for p in products], f, ensure_ascii=False, indent=2)
        return {"message": "–¢–æ–≤–∞—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã"}
    except Exception as e:
        raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä—ã")
